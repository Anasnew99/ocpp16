{"version":3,"sources":["main/ocppClient.js","App.js","reportWebVitals.js","index.js"],"names":["startTransaction","stopTransaction","a","transactionId","statusCommand","OCPPCommands","StatusNotification","connectorId","errorCode","StatusNotificationConst","status","client","send","startCommand","StopTransaction","meterStop","timestamp","Date","toISOString","idTag","authCommand","Authorize","StartTransaction","meterStart","connector1","Connector","connector2","ChargePoint","centralSystemUrl","Math","floor","random","connectors","connect","onRequest","command","RemoteStartTransaction","RemoteStopTransaction","setTimeout","RemoteStartTransactionConst","BootNotification","chargePointVendor","chargeBoxSerialNumber","round","chargePointSerialNumber","chargePointModel","console","error","process","on","err","log","reason","p","run","App","onClick","OCPPClient","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAWA,uBA8CiBA,EA9CjB,EAwEiBC,EAxEjB,WAAAC,EAAA,iGAAAA,EAAA,MAwEE,iCAAAA,EAAA,6DAAiCC,EAAjC,EAAiCA,cACzBC,EAAgB,IAAIC,eAAaC,mBAAmB,CACxDC,YAAaJ,EACbK,UAAWC,oBACXC,OAAQD,qBAJZ,SAOQE,EAAOC,KAAKR,GAPpB,cASQS,EAAe,IAAIR,eAAaS,gBAAgB,CACpDX,gBACAY,UAAW,EACXC,WAAW,IAAIC,MAAOC,gBAZ1B,SAeQP,EAAOC,KAAKC,GAfpB,4CAxEF,uBAwEiBZ,EAxEjB,gFAAAC,EAAA,MA8CE,qCAAAA,EAAA,6DAAkCK,EAAlC,EAAkCA,YAC1BY,EAAQ,OACRC,EAAc,IAAIf,eAAagB,UAAU,CAC7CF,UAHJ,SAMQR,EAAOC,KAAKQ,GANpB,cAQQhB,EAAgB,IAAIC,eAAaC,mBAAmB,CACxDC,cACAC,UAAWC,oBACXC,OAAQD,oBAXZ,SAcQE,EAAOC,KAAKR,GAdpB,cAgBQS,EAAe,IAAIR,eAAaiB,iBAAiB,CACrDf,cACAY,QACAI,WAAY,EACZP,WAAW,IAAIC,MAAOC,gBApB1B,UAuBQP,EAAOC,KAAKC,GAvBpB,6CA9CF,uBA8CiBb,EA9CjB,4CACQwB,EAAa,IAAIC,YAAU,GAC3BC,EAAa,IAAID,YAAU,GAE3Bd,EAAS,IAAIgB,cAAY,CAC7BC,iBAAiB,4CAAD,OAA8CC,KAAKC,MAAsB,KAAhBD,KAAKE,WAE9EC,WAAY,CACVR,EACAE,KATN,mBAcUf,EAAOsB,UAdjB,QAgBItB,EAAOuB,UAAP,uCAAmB,WAAOC,GAAP,SAAAjC,EAAA,4DAET,EAFS,cAGViC,aAAmB9B,eAAa+B,uBAHtB,SAQVD,aAAmB9B,eAAagC,sBARtB,wBAIbC,YAAW,kBAAMtC,EAAiBmC,KAAU,GAJ/B,kBAKN,CACLzB,OAAQ6B,oBANG,cASbD,YAAW,kBAAMrC,EAAgBkC,KAAU,GAT9B,kBAUN,CACLzB,OAAQ6B,oBAXG,2CAAnB,sDAgBa,IAAIlC,eAAamC,iBAAiB,CAC7CC,kBAAmB,SACnBC,sBAAuB,KAAOb,KAAKc,MAAsB,IAAhBd,KAAKE,UAC9Ca,wBAAyB,MACzBC,iBAAkB,OApCxB,kDA2CIC,QAAQC,MAAM,UAAd,MA3CJ,2D,sBAPAC,EAAQC,GAAG,qBAAqB,SAAUC,GACxCJ,QAAQK,IAAI,qBAAuBD,MAErCF,EAAQC,GAAG,sBAAsB,SAAUG,EAAQC,GACjDP,QAAQK,IAAI,4CAA6CE,EAAG,YAAaD,MA8F5DE,I,kfCpFAC,MAhBf,WAIE,OACA,qCACC,wCACA,8BACE,wBAAQC,QAPO,WAChBC,eAMC,2BCEUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.db9a8a9e.chunk.js","sourcesContent":["import { ChargePoint, Connector, OCPPCommands } from 'ocpp-eliftech';\r\nimport * as StatusNotificationConst from \"ocpp-eliftech/dist/commands/StatusNotification\";\r\nimport * as RemoteStartTransactionConst from \"ocpp-eliftech/dist/commands/RemoteStartTransaction\";\r\n\r\nprocess.on('uncaughtException', function (err) {\r\n  console.log('Caught exception: ' + err);\r\n});\r\nprocess.on('unhandledRejection', function (reason, p) {\r\n  console.log(\"Possibly Unhandled Rejection at: Promise \", p, \" reason: \", reason);\r\n});\r\n\r\nasync function run() {\r\n  const connector1 = new Connector(1);\r\n  const connector2 = new Connector(2);\r\n\r\n  const client = new ChargePoint({\r\n    centralSystemUrl: `http://localhost:3001/webServices/ocpp/CP${Math.floor(Math.random() * 9999)}`,\r\n    // centralSystemUrl: `https://ocpp-example.herokuapp.com/webServices/ocpp/CP${Math.floor(Math.random() * 9999)}`,\r\n    connectors: [\r\n      connector1,\r\n      connector2\r\n    ]\r\n  });\r\n\r\n  try {\r\n    await client.connect();\r\n\r\n    client.onRequest = async (command) => {\r\n      // eslint-disable-next-line default-case\r\n      switch (true) {\r\n        case command instanceof OCPPCommands.RemoteStartTransaction:\r\n          setTimeout(() => startTransaction(command), 1);\r\n          return {\r\n            status: RemoteStartTransactionConst.STATUS_ACCEPTED\r\n          };\r\n        case command instanceof OCPPCommands.RemoteStopTransaction:\r\n          setTimeout(() => stopTransaction(command), 1);\r\n          return {\r\n            status: RemoteStartTransactionConst.STATUS_ACCEPTED\r\n          };\r\n      }\r\n    };\r\n\r\n    const boot = new OCPPCommands.BootNotification({\r\n      chargePointVendor: 'BrandX',\r\n      chargeBoxSerialNumber: 'SR' + Math.round(Math.random() * 100000),\r\n      chargePointSerialNumber: '123',\r\n      chargePointModel: '12'\r\n    });\r\n\r\n    // await client.send(boot);\r\n\r\n    // await client.sendCurrentStatus();\r\n  } catch (err) {\r\n    console.error('--- Err', err);\r\n  }\r\n\r\n  async function startTransaction({ connectorId }) {\r\n    const idTag = 'test';\r\n    const authCommand = new OCPPCommands.Authorize({\r\n      idTag\r\n    });\r\n\r\n    await client.send(authCommand);\r\n\r\n    const statusCommand = new OCPPCommands.StatusNotification({\r\n      connectorId,\r\n      errorCode: StatusNotificationConst.ERRORCODE_NOERROR,\r\n      status: StatusNotificationConst.STATUS_CHARGING\r\n    });\r\n\r\n    await client.send(statusCommand);\r\n\r\n    const startCommand = new OCPPCommands.StartTransaction({\r\n      connectorId,\r\n      idTag,\r\n      meterStart: 0,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    await client.send(startCommand);\r\n  }\r\n\r\n  async function stopTransaction({ transactionId }) {\r\n    const statusCommand = new OCPPCommands.StatusNotification({\r\n      connectorId: transactionId,\r\n      errorCode: StatusNotificationConst.ERRORCODE_NOERROR,\r\n      status: StatusNotificationConst.STATUS_AVAILABLE\r\n    });\r\n\r\n    await client.send(statusCommand);\r\n\r\n    const startCommand = new OCPPCommands.StopTransaction({\r\n      transactionId,\r\n      meterStop: 1,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    await client.send(startCommand);\r\n  }\r\n}\r\n\r\nexport default run;\r\n","import './App.css';\nimport OCPPClient from './main/ocppClient';\nfunction App() {\n  const onConnect = ()=>{\n    OCPPClient();\n  }\n  return (\n  <>\n   <div>Hello</div>\n   <div>\n     <button onClick={onConnect}>\n       Connect\n     </button>\n   </div>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}